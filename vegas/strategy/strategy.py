"""Strategy Layer for the Vegas backtesting engine.

This module provides the base Strategy class for implementing trading strategies
using an event-driven approach.
"""

from typing import List, Dict, Any, Optional
from dataclasses import dataclass
import pandas as pd


@dataclass
class Signal:
    """Trading signal generated by a strategy.

    :param symbol: Trading symbol.
    :type symbol: str
    :param quantity: Signed quantity (positive=buy, negative=sell). Side inferred from sign.
    :type quantity: float
    :param order_type: Optional explicit order type (market/limit/stop/stop_limit/trail_stop/trail_stop_limit).
    :type order_type: Optional[str]
    :param limit_price: Limit price; alias `price` maintained for compatibility.
    :type limit_price: Optional[float]
    :param price: Backward-compat alias for `limit_price`.
    :type price: Optional[float]
    :param stop_price: Stop trigger level.
    :type stop_price: Optional[float]
    :param trail_amount: Trailing stop absolute distance (mutually exclusive with `trail_percent`).
    :type trail_amount: Optional[float]
    :param trail_percent: Trailing stop percent (0.1 = 10%, mutually exclusive with `trail_amount`).
    :type trail_percent: Optional[float]
    :param trigger_on_range: If True, evaluate triggers against bar high/low range.
    :type trigger_on_range: bool
    :param take_profit_price: Take-profit limit price for bracket child.
    :type take_profit_price: Optional[float]
    :param stop_loss_price: Stop trigger for bracket child (static or stop-limit when combined with stop_limit_price).
    :type stop_loss_price: Optional[float]
    :param stop_limit_price: Limit price for stop-limit bracket child.
    :type stop_limit_price: Optional[float]
    :param stop_trail_amount: Trailing stop absolute amount for bracket child.
    :type stop_trail_amount: Optional[float]
    :param stop_trail_percent: Trailing stop percent for bracket child (0.3 = 30%).
    :type stop_trail_percent: Optional[float]
    :Example:
        >>> Signal(symbol='AAPL', quantity=10, order_type='limit', limit_price=190.0)
    """
    symbol: str
    quantity: float
    order_type: Optional[str] = None
    limit_price: Optional[float] = None
    price: Optional[float] = None  # backwards-compat alias for limit_price
    stop_price: Optional[float] = None
    trail_amount: Optional[float] = None
    trail_percent: Optional[float] = None
    trigger_on_range: bool = True
    # Bracket/OCO fields
    take_profit_price: Optional[float] = None
    stop_loss_price: Optional[float] = None
    stop_limit_price: Optional[float] = None
    stop_trail_amount: Optional[float] = None
    stop_trail_percent: Optional[float] = None


class Context:
    """State container for strategies across hooks and trading days.

    Provides references to the portfolio and engine and can carry arbitrary
    user-defined attributes during a backtest.
    """
    
    def __init__(self):
        """Initialize an empty context with optional commission helper."""
        self._portfolio = None
        self._engine = None  # Reference to the BacktestEngine
        self.current_date = None

        # Commission model configured by the strategy (defaults applied by engine/broker if not set)
        self._commission_model = None

        # Expose a commission helper namespace to strategies:
        # usage: context.set_commission(commission.PerShare(...))
        try:
            from vegas.broker.commission import commission as _commission_ns  # lazy import
            self.commission = _commission_ns
        except Exception:
            self.commission = None
    
    def set_portfolio(self, portfolio):
        """Set the portfolio reference (used internally by the engine).

        :param portfolio: Portfolio object.
        :type portfolio: Any
        """
        self._portfolio = portfolio
        
    def set_engine(self, engine):
        """Set the `BacktestEngine` reference (used internally).

        :param engine: Backtest engine instance.
        :type engine: Any
        """
        self._engine = engine

    def set_commission(self, commission_model) -> None:
        """Set the commission model for this strategy instance."""
        self._commission_model = commission_model

    def get_commission_model(self):
        """Return the configured commission model (or None if not set)."""
        return self._commission_model
    
    @property
    def portfolio(self):
        """Return the current portfolio state reference."""
        return self._portfolio
    
    def __setattr__(self, name, value):
        """Set an attribute in the context state namespace."""
        self.__dict__[name] = value
    
    def __getattr__(self, name):
        """Return attribute value or raise if not present."""
        if name in self.__dict__:
            return self.__dict__[name]
        raise AttributeError(f"Context has no attribute '{name}'")


class Strategy:
    """Base class for event-driven trading strategies.

    Subclass and implement hooks such as `initialize` and `handle_data`.
    Optional hooks include `before_trading_start`, `on_market_open`,
    `on_market_close`, `on_bar`, `on_tick`, and `on_trade`.
    """
    
    def __init__(self):
        """Create a strategy with a fresh `Context`."""
        self.context = Context()
    
    def initialize(self, context: Context) -> None:
        """Hook called once at the beginning of the backtest.

        Use this to set up parameters and initialize state.
        """
        pass
    
    def handle_data(self, context: Context, data: pd.DataFrame) -> List[Signal]:
        """Process market data and return a list of `Signal` objects."""
        return []
    
    def before_trading_start(self, context: Context, data: pd.DataFrame) -> None:
        """Hook called at the beginning of each trading day (optional)."""
        pass
    
    def on_market_open(self, context: Context, data: pd.DataFrame, portfolio) -> None:
        """Hook called at market open (optional)."""
        pass
    
    def on_market_close(self, context: Context, data: pd.DataFrame, portfolio) -> None:
        """Hook called at market close (optional)."""
        pass
    
    def on_bar(self, context: Context, data: pd.DataFrame) -> None:
        """Hook called when a new bar is received (optional)."""
        pass
    
    def on_tick(self, context: Context, data: pd.DataFrame) -> None:
        """Hook called when a new tick is received (optional)."""
        pass
    
    def on_trade(self, context: Context, trade_event: Dict[str, Any], portfolio) -> None:
        """Hook called when a trade from this strategy is executed (optional)."""
        pass
    
    def analyze(self, context: Context, results: Dict[str, Any]) -> None:
        """Hook called at the end of the backtest for custom analysis (optional)."""
        pass 