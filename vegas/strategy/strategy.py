"""Strategy Layer for the Vegas backtesting engine.

This module provides the base Strategy class for implementing trading strategies
using an event-driven approach.
"""

from typing import List, Dict, Any, Optional
from dataclasses import dataclass
import pandas as pd


@dataclass
class Signal:
    """Trading signal generated by a strategy.
    
    Attributes:
        symbol: Trading symbol
        action: Action to take (e.g., "buy", "sell", "hold")
        quantity: Number of shares/contracts
        price: Optional price for limit orders
    """
    symbol: str
    action: str  # "buy", "sell", "hold"
    quantity: float
    price: Optional[float] = None


class Context:
    """Context for storing strategy state and parameters.
    
    This class provides a container for strategy-specific data that persists
    across trading days and strategy method calls.
    """
    
    def __init__(self):
        """Initialize an empty context."""
        self._portfolio = None
        self.current_date = None
    
    def set_portfolio(self, portfolio):
        """Set the portfolio reference (used internally).
        
        Args:
            portfolio: Portfolio object
        """
        self._portfolio = portfolio
    
    @property
    def portfolio(self):
        """Get the current portfolio state.
        
        Returns:
            Portfolio object
        """
        return self._portfolio
    
    def __setattr__(self, name, value):
        """Set an attribute in the context.
        
        Args:
            name: Attribute name
            value: Attribute value
        """
        self.__dict__[name] = value
    
    def __getattr__(self, name):
        """Get an attribute from the context.
        
        Args:
            name: Attribute name
            
        Returns:
            Attribute value
        
        Raises:
            AttributeError: If the attribute doesn't exist
        """
        if name in self.__dict__:
            return self.__dict__[name]
        raise AttributeError(f"Context has no attribute '{name}'")


class Strategy:
    """Base class for implementing event-driven trading strategies.
    
    This class provides an event-driven approach to implementing
    trading strategies. Subclass this class and implement the required
    methods to define your strategy.
    """
    
    def __init__(self):
        """Initialize the strategy."""
        self.context = Context()
    
    def initialize(self, context: Context) -> None:
        """Initialize the strategy with parameters.
        
        This method is called once at the beginning of the backtest.
        Override this method to set up strategy parameters and state.
        
        Args:
            context: Strategy context
        """
        pass
    
    def handle_data(self, context: Context, data: pd.DataFrame) -> List[Signal]:
        """Process market data and generate trading signals.
        
        This method is called for each time step in the event-driven backtest.
        Override this method to implement your strategy logic.
        
        Args:
            context: Strategy context
            data: Market data for current time step, containing all symbols
            
        Returns:
            List of trading signals
        """
        return []
    
    def before_trading_start(self, context: Context, data: pd.DataFrame) -> None:
        """Execute pre-trading logic.
        
        This method is called at the beginning of each trading day.
        Override this method to implement pre-trading day logic.
        
        Args:
            context: Strategy context
            data: Market data for the current day
        """
        pass
    
    def on_market_open(self, context: Context, data: pd.DataFrame, portfolio) -> None:
        """Execute logic at market open.
        
        This method is called at market open (9:30 AM) of each trading day.
        Override this method to implement specific market open logic.
        
        Args:
            context: Strategy context
            data: Market data for the current time
            portfolio: Portfolio object with current positions and cash
        """
        pass
    
    def on_market_close(self, context: Context, data: pd.DataFrame, portfolio) -> None:
        """Execute logic at market close.
        
        This method is called at market close (4:00 PM) of each trading day.
        Override this method to implement specific market close logic.
        
        Args:
            context: Strategy context
            data: Market data for the current time
            portfolio: Portfolio object with current positions and cash
        """
        pass
    
    def on_bar(self, context: Context, data: pd.DataFrame) -> None:
        """Execute logic when a new bar is received.
        
        This method is called when a new bar is available in event-driven mode.
        Override this method to implement bar-specific logic.
        
        Args:
            context: Strategy context
            data: Market data for the current bar
        """
        pass
    
    def on_tick(self, context: Context, data: pd.DataFrame) -> None:
        """Execute logic when a new tick is received.
        
        This method is called when a new tick is available in event-driven mode.
        Override this method to implement tick-specific logic.
        
        Args:
            context: Strategy context
            data: Market data for the current tick
        """
        pass
    
    def on_trade(self, context: Context, trade_event: Dict[str, Any], portfolio) -> None:
        """Execute logic when a trade is executed.
        
        This method is called when a trade from this strategy is executed.
        Override this method to implement trade-specific logic.
        
        Args:
            context: Strategy context
            trade_event: Dict with trade details
            portfolio: Portfolio object with current positions and cash
        """
        pass
    
    def analyze(self, context: Context, results: Dict[str, Any]) -> None:
        """Analyze backtest results.
        
        This method is called at the end of the backtest.
        Override this method to implement custom analysis.
        
        Args:
            context: Strategy context
            results: Backtest results
        """
        pass 